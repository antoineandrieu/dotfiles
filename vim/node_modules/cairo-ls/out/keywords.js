"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BASE_STARKNET_KEYWORDS = exports.BASE_LVL_KEYWORDS = exports.FUNC_LVL_KEYWORDS = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
// Keywords available all around the file
// A "sortText" key is added to each keyword object so that it won't mix up with import suggestions
const BASE_LVL_KEYWORDS = [
    {
        label: "namespace",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "namespace",
    },
    {
        label: "func",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "function",
    },
    {
        label: "from",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "from"
    },
    {
        label: "import",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "import"
    },
    {
        label: "const",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "const"
    },
    {
        label: "end",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "end"
    },
    {
        label: "member",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "struct member"
    },
    {
        label: "felt",
        kind: vscode_languageserver_1.CompletionItemKind.Class,
        detail: "field element"
    },
    {
        label: "struct",
        kind: vscode_languageserver_1.CompletionItemKind.Class,
        detail: "struct"
    },
    {
        label: "error_message",
        kind: vscode_languageserver_1.CompletionItemKind.Class,
        detail: "error message"
    }
].map((kw) => Object.assign(kw, { sortText: "1" }));
exports.BASE_LVL_KEYWORDS = BASE_LVL_KEYWORDS;
// Keywords only available inside a function
const FUNC_LVL_KEYWORDS = [
    {
        label: "const",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "const"
    },
    {
        label: "let",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "let"
    },
    {
        label: "local",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "local"
    },
    {
        label: "if",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "if"
    },
    {
        label: "else",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "else"
    },
    {
        label: "end",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "end"
    },
    {
        label: "return",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "return"
    },
    {
        label: "assert",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "assert"
    },
    {
        label: "with_attr",
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        detail: "with attribute"
    },
    {
        label: "felt",
        kind: vscode_languageserver_1.CompletionItemKind.Class,
        detail: "field element"
    },
    {
        label: "struct",
        kind: vscode_languageserver_1.CompletionItemKind.Class,
        detail: "struct"
    },
    {
        label: "error_message",
        kind: vscode_languageserver_1.CompletionItemKind.Class,
        detail: "error message"
    },
    {
        label: "alloc_locals",
        kind: vscode_languageserver_1.CompletionItemKind.Function,
        detail: "allocate locals"
    },
    {
        label: "alloc",
        kind: vscode_languageserver_1.CompletionItemKind.Function,
        detail: "allocate"
    },
];
exports.FUNC_LVL_KEYWORDS = FUNC_LVL_KEYWORDS;
// Extension should both support Cairo and Starknet, seperate both
// Conventionally this includes only @ decorators
const BASE_STARKNET_KEYWORDS = [
    {
        label: "storage_var",
        kind: vscode_languageserver_1.CompletionItemKind.Property,
        detail: "storage variable"
    },
    {
        label: "view",
        kind: vscode_languageserver_1.CompletionItemKind.Property,
        detail: "view"
    },
    {
        label: "external",
        kind: vscode_languageserver_1.CompletionItemKind.Property,
        detail: "external"
    },
    {
        label: "l1_handler",
        kind: vscode_languageserver_1.CompletionItemKind.Property,
        detail: "l1 handler"
    },
].map((kw) => Object.assign(kw, { sortText: "2" }));
exports.BASE_STARKNET_KEYWORDS = BASE_STARKNET_KEYWORDS;
//# sourceMappingURL=keywords.js.map